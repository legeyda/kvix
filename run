#!/usr/bin/env sh
set -eu

# env: PYTHON?
# env: USE_VENV?
main() {
	: "${PYTHON:=python3}"
	for target in "$@"; do
		"run_$target"
	done
}

run_vscode() {
	echo 'configuring vscode...'
	mkdir -p .vscode/venv
	python -m venv .vscode/venv
	.vscode/venv/bin/python -m pip install . tox \
			types-pkg-resources \
			types-pynput \
			types-PyYAML \
			funcy-stubs \
			types-Jinja2
	code .
	# todo PS1="(kvix/.vscode/venv) ${PS1:-}"
	echo 'done configuring vscode'
}


run_clean() {
	echo 'cleaning project directory...'
	rm -vrf ./build ./dist *.egg-info src/*.egg-info .tox
	find . -name '*.pyc' -exec echo rm '{}' ';'
	find . -type d -empty -print0 | xargs -0 -n1 echo rmdir
	echo 'done cleaning'
}

run_check() {
	echo running all tox environment...
	maybe_create_venv
	"$PYTHON" -m pip install tox
	"$PYTHON" -m tox -v
	echo done runing tox
}

# env: target
#      USE_VENV?
#      PYTHON? 
maybe_create_venv() {
	if [ "true" = "${USE_VENV:-true}" ]; then
		local path="build/run/venv/${1:-$target}"
		#local path=$(mktemp -d -t "kvix-run-$target.$(date +%Y-%m-%d_%H-%M-%S).XXXX")
		mkdir -p "$path"
		echo "creating python virtual environment in '$path'"
		"$PYTHON" -m venv "$path"
		PYTHON="$path/bin/python3"
		echo "now using '$PYTHON' as python executable"
	fi
}

# env: PYTHON
# env: USE_VENV
run_pyproject() {
	echo building pyproject...
	maybe_create_venv
	"$PYTHON" -m pip install install 'build==1.0.3'
	"$PYTHON" -m build
	echo done building pyproject
}

# env: USE_VENV
# env: python
run_pyinstaller() {
	echo 'building pyinstaller...'
	maybe_create_venv
	"$PYTHON" -m pip install 'pyinstaller==6.1.0' 'setuptools-git-versioning==1.13.5' .
	"$PYTHON" -m PyInstaller pyinstaller.spec
	echo 'done building pyinstaller'
}

run_publish() {
	echo 'uploading artifacts to pypi...'
	maybe_create_venv
	"$PYTHON" -m pip install twine
	"$PYTHON" -m twine upload --repository pypi dist/*
	echo 'done uploading artifacts to pypi'
}

main "$@" # entry point