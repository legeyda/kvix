#!/usr/bin/env sh
set -eu

# env: PYTHON
# env: CREATE_VENV
main() {
	all_args="$@"
	if [ -n "$all_args" ]; then
		run_targets "$@"	
	else
		echo 'no arguments, assuming pyproject'
		run_targets pyproject
	fi
}

# env: PYTHON
# env: CREATE_VENV
run_targets() {
	for target in "$@"; do
		case "$target" in
			clean|check|pyproject|pyinstaller|publish)
				"run_$target"
				reset_python_exe
				;;
			PYTHON=*|CREATE_VENV=*) eval "$target" ;;
			*) echo "unsupported target '$target'"
		esac
	done
}

# env: PYTHON?
#      CURRENT_PYTHON?
get_python_exe() {
	if [ -z "${CURRENT_PYTHON:-}" ]; then
		CURRENT_PYTHON="${PYTHON:-python3}"
	fi
	echo "$CURRENT_PYTHON"
}

# env: CURRENT_PYTHON?
set_python_exe() {
	CURRENT_PYTHON="$1"
}

# env: CURRENT_PYTHON?
reset_python_exe() {
	unset CURRENT_PYTHON
}

run_check() {
	echo running all tox environment...
	maybe_create_venv
	"$(get_python_exe)" -m pip install tox
	"$(get_python_exe)" -m tox
	echo done runing tox
}


run_clean() {
	echo 'cleaning project directory...'
	rm -vrf ./build ./dist *.egg-info src/*.egg-info
	echo 'done cleaning'
}

# env: PYTHON
# env: CREATE_VENV
run_pyproject() {
	echo building pyproject...
	maybe_create_venv
	"$(get_python_exe)" -m pip install install 'build==1.0.3'
	"$(get_python_exe)" -m build
	echo done building pyproject
}

# env: target
#      CREATE_VENV?
#      PYTHON? 
maybe_create_venv() {
	if [ "true" = "${CREATE_VENV:-true}" ]; then
		local path="build/run/venv/$target"
		#local path=$(mktemp -d -t "kvix-run-$target.$(date +%Y-%m-%d_%H-%M-%S).XXXX")
		mkdir -p "$path"
		echo "creating python virtual environment in '$path'"
		"$(get_python_exe)" -m venv "$path"
		set_python_exe "$path/bin/python3"
		echo "now using '$(get_python_exe)' as python executable"
	fi
}

# env: CREATE_VENV
# env: python
run_pyinstaller() {
	echo 'building pyinstaller...'
	maybe_create_venv
	"$(get_python_exe)" -m pip install 'pyinstaller==6.1.0' 'setuptools-git-versioning==1.13.5' .
	"$(get_python_exe)" -m PyInstaller pyinstaller.spec
	echo 'done building pyinstaller'
}

run_publish() {
	echo 'uploading artifacts to pypi...'
	maybe_create_venv
	"$(get_python_exe)" -m pip install twine
	"$(get_python_exe)" -m twine upload --repository pypi dist/*
	echo 'done uploading artifacts to pypi'
}

# entry point
main "$@"