#!/usr/bin/env sh
set -eu

# env: PYTHON
# env: USE_VENV
main() {
	if [ kvix != $(basename $(pwd)) ]; then
		echo not inside kvix
		return 1
	fi

	all_args="$@"
	if [ -n "$all_args" ]; then
		run_targets "$@"	
	else
		echo 'no arguments, assuming pyproject'
		run_targets pyproject
	fi
}

# env: PYTHON
# env: USE_VENV
run_targets() {
	for target in "$@"; do
		case "$target" in
			vscode|clean|check|pyproject|pyinstaller|publish)
				"run_$target"
				reset_python_exe
				;;
			PYTHON=*|USE_VENV=*) eval "$target" ;;
			*) echo "unsupported target '$target'"
		esac
	done
}

# env: PYTHON?
#      CURRENT_PYTHON?
get_python_exe() {
	if [ -z "${CURRENT_PYTHON:-}" ]; then
		CURRENT_PYTHON="${PYTHON:-python3}"
	fi
	echo "$CURRENT_PYTHON"
}

# env: CURRENT_PYTHON?
set_python_exe() {
	CURRENT_PYTHON="$1"
}

# env: CURRENT_PYTHON?
reset_python_exe() {
	unset CURRENT_PYTHON
}

run_vscode() {
	echo 'configuring vscode...'
	mkdir -p .vscode/venv
	python -m venv .vscode/venv
	.vscode/venv/bin/python -m pip install . tox types-pkg-resources types-pynput types-PyYAML
	code .
	# todo PS1="(kvix/.vscode/venv) ${PS1:-}"
	echo 'done configuring vscode'
}


run_clean() {
	echo 'cleaning project directory...'
	rm -vrf ./build ./dist *.egg-info src/*.egg-info .tox
	find . -name '*.pyc' -exec echo rm '{}' ';'
	find . -type d -empty -print0 | xargs -0 -n1 echo rmdir
	echo 'done cleaning'
}

run_check() {
	echo running all tox environment...
	maybe_create_venv
	"$(get_python_exe)" -m pip install tox
	"$(get_python_exe)" -m tox -v
	echo done runing tox
}

# env: target
#      USE_VENV?
#      PYTHON? 
maybe_create_venv() {
	if [ "true" = "${USE_VENV:-true}" ]; then
		create_venv
	fi
}

# env: target
#      PYTHON? 
create_venv() {
	local path="build/run/venv/${1:-$target}"
	#local path=$(mktemp -d -t "kvix-run-$target.$(date +%Y-%m-%d_%H-%M-%S).XXXX")
	mkdir -p "$path"
	echo "creating python virtual environment in '$path'"
	"$(get_python_exe)" -m venv "$path"
	set_python_exe "$path/bin/python3"
	echo "now using '$(get_python_exe)' as python executable"
}

# env: PYTHON
# env: USE_VENV
run_pyproject() {
	echo building pyproject...
	maybe_create_venv
	"$(get_python_exe)" -m pip install install 'build==1.0.3'
	"$(get_python_exe)" -m build
	echo done building pyproject
}


# env: USE_VENV
# env: python
run_pyinstaller() {
	echo 'building pyinstaller...'
	maybe_create_venv
	"$(get_python_exe)" -m pip install 'pyinstaller==6.1.0' 'setuptools-git-versioning==1.13.5' .
	"$(get_python_exe)" -m PyInstaller pyinstaller.spec
	echo 'done building pyinstaller'
}

run_publish() {
	echo 'uploading artifacts to pypi...'
	maybe_create_venv
	"$(get_python_exe)" -m pip install twine
	"$(get_python_exe)" -m twine upload --repository pypi dist/*
	echo 'done uploading artifacts to pypi'
}

# entry point
main "$@"