#!/usr/bin/env sh
set -eu

# env: PYTHON
# env: USE_VENV
main() {
	all_args="$@"
	if [ -n "$all_args" ]; then
		run_targets "$@"	
	else
		echo 'no arguments, assuming pyproject'
		run_targets pyproject
	fi
}

# env: PYTHON
# env: USE_VENV
run_targets() {
	for target in "$@"; do
		case "$target" in
			clean|pyproject|pyinstaller)
				ORIG_PYTHON=${PYTHON:-}
				"run_$target" 
				PYTHON=$ORIG_PYTHON
				;;
			PYTHON=*|USE_VENV=*) eval "$target" ;;
			*) echo "unsupported target '$target'"
		esac
	done
}


run_clean() {
	echo 'cleaning project directory...'
	rm -vrf ./build ./dist *.egg-info src/*.egg-info
	echo 'done cleaning'
}

# env: PYTHON
# env: USE_VENV
run_pyproject() {
	echo building pyproject...
	maybe_create_venv
	"$(python_exe)" -m pip install install 'build==1.0.3'
	"$(python_exe)" -m build
	echo done building pyproject
}

# env: target
#      USE_VENV?
#      PYTHON? 
maybe_create_venv() {
	if [ "true" = "${USE_VENV:-true}" ]; then
		local path=$(mktemp -d -t "kwix-run-$target.$(date +%Y-%m-%d_%H-%M-%S).XXXX")
		echo "creating python virtual environment in $path"
		"$(python_exe)" -m venv "$path"
		PYTHON="$path/bin/python3"
		echo "now using '$PYTHON' as python executable"
	fi
}

# env: PYTHON
python_exe() {
	if [ -z "${PYTHON:-}" ]; then
		PYTHON=python3
	fi
	echo "$PYTHON"
}


# env: use_venv
# env: python
run_pyinstaller() {
	echo 'building pyinstaller...'
	maybe_create_venv
	"$(python_exe)" -m pip install 'pyinstaller==6.1.0' 'setuptools-git-versioning==1.13.5' .
	"$(python_exe)" -m PyInstaller pyinstaller.spec
	echo 'done building pyinstaller'
}

# entry point
main "$@"