#!/usr/bin/env sh
set -eu

# env: PYTHON
# env: USE_VENV
main() {
	all_args="$@"
	if [ -n "$all_args" ]; then
		make_targets "$@"	
	else
		echo 'no arguments, assuming pyproject'
		make_targets pyproject
	fi
}

# env: PYTHON
# env: USE_VENV
make_targets() {
	for target in "$@"; do
		case "$target" in
			clean|pyproject|pyinstaller) "make_$target" ;;
			PYTHON=*|USE_VENV=*) eval "$target" ;;
			*) echo "unsupported target '$target'"
		esac
	done
}


make_clean() {
	echo 'cleaning project directory...'
	rm -vrf ./build ./dist *.egg-info src/*.egg-info
	echo 'done cleaning'
}

# env: PYTHON
# env: USE_VENV
make_pyproject() {
	echo building pyproject...
	PYTHON=$(find_python)

	if is_use_venv; then
		VENV=$(get_venv_dir pyproject)
		echo "creating python virtual environment in $VENV"
		"$PYTHON" -m venv "$VENV"
		PYTHON="$VENV/bin/python3"
		echo "now using '$PYTHON' as python executable"
	fi

	"$PYTHON" -m pip install install 'build==1.0.3'
	"$PYTHON" -m build
	echo done building pyproject
}

is_use_venv() {
	test "true" = "${USE_VENV:-true}" && return 0 || return 1
}

# fun: get_venv_dir span
get_venv_dir() {
	mktemp -d -t "kwix-build-$1.$(date +%Y-%m-%d_%H-%M-%S).XXXX"
}

create_venv() {
	"$(find_python)" -m venv "$1"
}

# env: PYTHON
find_python() {
	if [ -z "${PYTHON:-}" ]; then
		PYTHON=python3
	fi
	echo "$PYTHON"
}


# env: use_venv
# env: python
make_pyinstaller() {
	echo 'building pyinstaller...'
	PYTHON=$(find_python)

	if is_use_venv; then
		VENV=$(get_venv_dir pyinstaller)
		echo "creating python virtual environment in $VENV"
		"$PYTHON" -m venv "$VENV"
		PYTHON="$VENV/bin/python3"
		echo "now using '$PYTHON' as python executable"
	fi

	"$PYTHON" -m pip install 'pyinstaller==6.1.0' 'setuptools-git-versioning==1.13.5' .
	"$PYTHON" -m PyInstaller pyinstaller.spec
	echo 'done building pyinstaller'
}

# entry point
main "$@"